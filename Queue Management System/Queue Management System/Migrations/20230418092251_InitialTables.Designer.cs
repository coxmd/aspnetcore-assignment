// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Queue_Management_System.Models.Data;

#nullable disable

namespace Queue_Management_System.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230418092251_InitialTables")]
    partial class InitialTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Queue_Management_System.Models.Admin", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("Administrator");
                });

            modelBuilder.Entity("Queue_Management_System.Models.CustomerTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CallTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CheckInTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Completed")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("EndServiceTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsCalled")
                        .HasColumnType("boolean");

                    b.Property<bool>("NoShow")
                        .HasColumnType("boolean");

                    b.Property<int>("ServicePointId")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceProviderId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartServiceTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ServicePointId");

                    b.HasIndex("ServiceProviderId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Queue_Management_System.Models.ServicePoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ServicePoints");
                });

            modelBuilder.Entity("Queue_Management_System.Models.ServiceProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ServicePointId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ServicePointId");

                    b.ToTable("ServiceProviders");
                });

            modelBuilder.Entity("Queue_Management_System.Models.CustomerTicket", b =>
                {
                    b.HasOne("Queue_Management_System.Models.ServicePoint", "ServicePoint")
                        .WithMany()
                        .HasForeignKey("ServicePointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Queue_Management_System.Models.ServiceProvider", "ServiceProvider")
                        .WithMany()
                        .HasForeignKey("ServiceProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServicePoint");

                    b.Navigation("ServiceProvider");
                });

            modelBuilder.Entity("Queue_Management_System.Models.ServiceProvider", b =>
                {
                    b.HasOne("Queue_Management_System.Models.ServicePoint", "ServicePoint")
                        .WithMany("ServiceProviders")
                        .HasForeignKey("ServicePointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServicePoint");
                });

            modelBuilder.Entity("Queue_Management_System.Models.ServicePoint", b =>
                {
                    b.Navigation("ServiceProviders");
                });
#pragma warning restore 612, 618
        }
    }
}
